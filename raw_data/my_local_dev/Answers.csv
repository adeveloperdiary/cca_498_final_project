Id,OwnerUserId,CreationDate,ParentId,Score,Body
17532939,819544.0,2013-07-08T17:51:10Z,17532666,0,"<p>According to <a href=""https://groups.google.com/forum/#!topic/tweepy/wxUhpqPDoWQ"" rel=""nofollow"">this google groups post</a>, tweepy is supposed to support the 1.1 API. Your error message reports that tweepy is trying to use the 1.0 API. I suspect your update failed. Try uninstalling and reinstalling tweepy. What version of tweepy are you using? <code>tweepy.__version__</code> should be 2.0</p>
"
17534909,2497657.0,2013-07-08T19:56:01Z,17532666,0,"<p>You are using basic authentication with user name and password. However, Twitter API 1.1 only supports OAuth. Here is how you authenticate with OAuth and Tweepy:</p>

<pre><code>auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(key, secret)
</code></pre>

<p>according to <a href=""http://pythonhosted.org/tweepy/html/auth_tutorial.html"" rel=""nofollow"">this page</a>.</p>
"
10541546,90801.0,2012-05-10T20:22:23Z,10540999,6,"<p><a href=""http://clojure.org/protocols"">Protocols</a> are well suited to this in Clojure, you define a protocol (a lot like an interface) that defines all the functions required to interface with a database, then at runtime you call the contructor of the graph protocol that builds in instance of the protocol that connects to your DB of choice. </p>

<p>the basic flow is very much the same, except using Clojure protocols. </p>
"
34126295,5385159.0,2015-12-07T04:09:47Z,34126234,1,"<p>Iterating through a JSON object using a for each loop will give you a key in the json object.
Hence, in your loop data will refer to the string 'desktop' itself (and other keys in the object) and hence when you try to do <code>data['desktop']</code> you are actually attempting to get the index of a string but since string indexes must be numbers, it fails</p>

<p>To print the 'desktop' key from the file you can simply write <code>print(datas['desktop'])</code></p>
"
34126299,642070.0,2015-12-07T04:10:36Z,34126234,0,"<p>Try <code>print(type(datas))</code>, you'll see its the outer dict. Enumerating the dict enumerates its keys which are strings. <code>data</code> is a string and not surprisingly, <code>data['desktop']</code> fails. Many questions are answered with a few well-placed prints!</p>
"
34126303,2813589.0,2015-12-07T04:10:48Z,34126234,1,"<p>Try this: </p>

<pre><code>for k, v in datas.iteritems():
   # your stuff
</code></pre>
"
34126309,3929826.0,2015-12-07T04:11:21Z,34126234,1,"<p>Looping through a dictionary will gave you the keys as strings only. What you might want to have is:</p>

<pre><code>for key, value in datas.items()
    print(key, value)
</code></pre>
"
34126315,4938839.0,2015-12-07T04:11:47Z,34126234,0,"<p>my case</p>

<pre><code>data = res.read() //&lt;&lt;--HTTP DATA
resDic = json.loads(data.decode())
if resDic[""code""] == 1000:
    //some thing
</code></pre>

<p>Try data.decode()</p>
"
34126369,1476941.0,2015-12-07T04:18:13Z,34126234,1,"<p>First you need to understand that this is not a JSON array. This is a json object - </p>

<pre><code>{
   ""desktop"":{
      ""name"":""build"",
      ""upload"":{
         ""maximum"":512,
      },
      ""load"":{
         ""core"":""i7"",
      }
   },
   ""table"":{
      ""name"":""clean"",
      ""upload"":{
         ""maximum"":1024,
      },
      ""load"":{
         ""core"":""i3"",
      }
   }
}
</code></pre>

<p>so the code -</p>

<pre><code>for data in datas:
    print(data['desktop'])
</code></pre>

<p>is not iterating through the array items, it is actually iterating through the properties/attributes of that object <code>datas</code>.
So doing this gives you item already - </p>

<pre><code>for data in datas:
    print(datas[data])
</code></pre>

<p>but if you want to manipulate and find each attribute you can check like this - </p>

<pre><code>for data in datas:
    print(data)
    print(datas[data])

    if data == 'desktop':
        print('do somthing')
</code></pre>

<p>Here is an online view of it- <a href=""https://repl.it/B61g"" rel=""nofollow"">https://repl.it/B61g</a></p>

<p><strong>EDIT</strong></p>

<p>If <code>datas</code> can be array or object, you can check like this - </p>

<pre><code>if type(datas) is list:
    # datas is list do whatever you like
else:
    # datas is obj
</code></pre>
"
34126574,4938839.0,2015-12-07T04:41:38Z,34126234,0,"<pre><code>{
   ""desktop"":{
      ""name"":""build"",
      ""upload"":{
         ""maximum"":512
      },
      ""load"":{
         ""core"":""i7""
      }
   },
   ""table"":{
      ""name"":""clean"",
      ""upload"":{
         ""maximum"":1024
      },
      ""load"":{
         ""core"":""i3""
      }
   }
}
</code></pre>

<p><a href=""http://i.stack.imgur.com/lq2ZC.jpg"" rel=""nofollow""><img src=""http://i.stack.imgur.com/lq2ZC.jpg"" alt=""code image""></a></p>

<p>json when one of the attributes that should be no comma</p>
"
23721856,983064.0,2014-05-18T12:25:39Z,23721800,0,"<p>This is the kind of scenario where streaming is very important. Doing everything in memory is a bad idea because you might not have enough memory (as in your case). You should probably save the chunks to disk, keep track of how many you downloaded, and when you reach 1000, process them on disk (or load them into memory one by one to process them).</p>

<p>""<a href=""http://www.programmersranch.com/2014/05/c-security-computing-file-hashes.html"" rel=""nofollow"">C# Security: Computing File Hashes</a>"" is a recent article I wrote - it's a different subject, but it does illustrate the importance of streaming towards the end.</p>
"
10126709,565595.0,2012-04-12T15:24:30Z,10126239,1,"<p>You must refer to the documentation of <code>telnetlib</code> module <a href=""http://docs.python.org/library/telnetlib.html"" rel=""nofollow"">here</a>.<br>
Try this - </p>

<pre><code>tn = telnetlib.Telnet(HOST)
tn.read_until(""login: "")
tn.write(user + ""\n"")
if password:
    tn.read_until(""Password: "")
    tn.write(password + ""\n"")

tn.write(""command1"")
print tn.read_eager()
tn.write(""command2"")
print tn.read_eager()
tn.write(""command3"")
print tn.read_eager()
tn.write(""command4"")
print tn.read_eager()
tn.write(""exit\n"")

sess_op = tn.read_all()
print sess_op
</code></pre>
"
10539756,879255.0,2012-05-10T18:05:09Z,10126239,5,"<p>I ran into something similar while working with telnetlib.</p>

<p>Then I realized a missing carriage return and a new line at the end of each command and did a read_eager for all commands. Something like this:</p>

<pre><code> tn = telnetlib.Telnet(HOST, PORT)
 tn.read_until(""login: "")
 tn.write(user + ""\r\n"")
 tn.read_until(""password: "")
 tn.write(password + ""\r\n"")

 tn.write(""command1\r\n"")
 ret1 = tn.read_eager()
 print ret1 #or use however you want
 tn.write(""command2\r\n"")
 print tn.read_eager()
 ... and so on
</code></pre>

<p>instead of only writing the command like:</p>

<pre><code> tn.write(""command1"")
 print tn.read_eager()
</code></pre>

<p>If it worked with just a ""\n"" for you, adding only a ""\n"" might be enough instead of ""\r\n"" but in my case, I had to use ""\r\n"" and I haven't tried with just a new line yet.</p>
"
