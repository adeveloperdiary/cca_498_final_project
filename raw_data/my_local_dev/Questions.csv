Id,OwnerUserId,CreationDate,Score,Title,Body
17532666,2556416.0,2013-07-08T17:33:15Z,0,Migrating to Twitter API version 1.1 (?) [duplicated],"<p>I am quite new to Twitter API. I have updated Tweepy. I don't know what is wrong with this code and how to fix it to make it work for new version of Twitter API:</p>

<pre><code>import oauth, tweepy 
from time import sleep

#stars is confident information
username = ""*******""
password = ""***********""
auth = tweepy.BasicAuthHandler(username, password)
api = tweepy.API(auth)

api.update_status('hello from tweepy!')
</code></pre>

<p>Terminal is showing me this:</p>

<pre><code>$ python py/twi.py
Traceback (most recent call last):
  File ""py/twi.py"", line 11, in &lt;module&gt;
    api.update_status('hello from tweepy!')
  File ""/usr/lib/python2.7/dist-packages/tweepy/binder.py"", line 179, in _call
    return method.execute()
  File ""/usr/lib/python2.7/dist-packages/tweepy/binder.py"", line 162, in execute
    raise TweepError(error_msg, resp)
 tweepy.error.TweepError: [{'message': 'The Twitter REST API v1 is no longer active. Please migrate to     API v1.1. https://dev.twitter.com/docs/api/1.1/overview.', 'code': 68}]
</code></pre>

<p>Please help.</p>
"
10540999,161085.0,2012-05-10T19:37:09Z,4,How to configure a Clojure library at runtime?,"<p>As a Clojure learning exercise, I am porting Bulbs (<a href=""http://bulbflow.com"" rel=""nofollow"">http://bulbflow.com</a>), a graph-database library I wrote, from Python to Clojure.</p>

<p>One of the things I'm still somewhat fuzzy on is how to structure the library in a Clojure idiomatic way. </p>

<p>To support multiple databases, Bulbs uses dependency injection. The different database backends are abstracted away in a custom Client class that implements an interface, and the client is configured at runtime. </p>

<p>The Graph object and its various proxy objects hold an instance of the low-level Client object:</p>

  <pre class=""lang-py prettyprint-override""><code># bulbs/neo4jserver/graph.py

class Graph(object):

    default_uri = NEO4J_URI

    def __init__(self, config=None):
        self.config = config or Config(self.default_uri)
        self.client = Neo4jClient(self.config)

        self.vertices = VertexProxy(Vertex, self.client)
        self.edges = EdgeProxy(Edge, self.client)
</code></pre>

<p>You use Bulbs by creating a Graph object for the respective graph-database server:</p>

<pre><code>&gt;&gt;&gt; from bulbs.neo4jserver import Graph
&gt;&gt;&gt; g = Graph()
</code></pre>

<p>And then you can create vertices and edges in the database via the proxy objects:</p>

<pre><code>&gt;&gt;&gt; james = g.vertices.create(name=""James"")
&gt;&gt;&gt; julie = g.vertices.create(name=""Julie"")
&gt;&gt;&gt; g.edges.create(james, ""knows"", julie)
</code></pre>

<p>This design makes it easy to use Bulbs from the REPL because all you have to do is import and instantiate the Graph object (or possibly pass in a custom Config object if needed). </p>

<p>But I'm not sure how to approach this design in Clojure since the Graph object and its proxies need to hold the Client object, which is configured at runtime. </p>

<p>What's the Clojure-way of doing this?</p>

<p>UPDATE: This is what I ended up doing...</p>

 <pre class=""lang-lisp prettyprint-override""><code>;; bulbs/neo4jserver/client.clj

(def ^:dynamic *config* default-config)

(defn set-config!
  [config]
  (alter-var-root #'*config* (fn [_] (merge default-config config))))

(defn neo4j-client
  [&amp; [config]]
  (set-config! config))

(neo4j-client {:root_uri ""http://localhost:7474/data/db/""})

(println *config*)
</code></pre>

<p>UPDATE 2: </p>

<p>Andrew Cooke pointed out that using a global var would preclude you from being able to use multiple, independent graph ""instances"" in your program, whereas you can in the Python version.</p>

<p>And so I came up with this:</p>

   <pre class=""lang-lisp prettyprint-override""><code>(defn graph
  [&amp; [config]]
  (let [config (get-config config)]
    (fn [func &amp; args]
      (apply func config args))))

(defn create-vertex
  [config data]
  (let [path (build-path vertex-path)
        params (remove-null-values data)]
    (rest/post config path params)))

(defn gremlin
  [config script &amp; [params]]
  (rest/post config gremlin-path {:script script :params params}))
</code></pre>

<p>And then you can call the different functions like this:</p>

<pre><code>(def g (graph {:root_uri ""http://localhost:7474/data/db/""}))

(g create-vertex {:name ""James""})

(g gremlin ""g.v(id)"" {:id 178})
</code></pre>

<p>Now I haven't delved into macros yet, and I'm not too sure of the merits of this approach compared to others so feedback welcome.</p>
"
34126234,3769629.0,2015-12-07T04:02:48Z,0,Handling JSON file with python,"<p>I'm developing a plugin for sublime text and I'm have some problems handling a json file.</p>

<p><strong>This is the json file</strong></p>

<pre><code>{
   ""desktop"":{
      ""name"":""build"",
      ""upload"":{
         ""maximum"":512,
      },
      ""load"":{
         ""core"":""i7"",
      }
   },
   ""table"":{
      ""name"":""clean"",
      ""upload"":{
         ""maximum"":1024,
      },
      ""load"":{
         ""core"":""i3"",
      }
   }
}
</code></pre>

<p><strong>An this is how I load it</strong></p>

<pre><code>with open(self.path, 'r') as f:
    text = f.read()
    datas = json.loads(text)

    for data in datas:
        print(data['desktop'])
</code></pre>

<p><strong>The output show me this error</strong></p>

<pre><code>TypeError: string indices must be integers
</code></pre>

<p>But when I try with <code>data[0]</code> I get one character from the json file.</p>

<p>I know I'm doing something wrong with the parse and encoding, but I don't know where. I been all day reading previous posts from here and trying to figure out what is the right way to do it.</p>

<p>I'll apreciate any help.</p>
"
23721800,2474015.0,2014-05-18T12:19:40Z,0,Getting a MemoryError because list/array is too large,"<h2>Problem</h2>

<p>I have to download <code>object_x</code>. For simplicity's sake, <code>object_x</code> comprises a series of <code>integers</code> adding up to <code>1000</code>. The download is irregular. I receive groups or <code>chunks</code> of integers in seemingly random order, and I need to keep track of them until I have all <code>1000</code> to make up the final <code>object_x</code>.</p>

<p>The incoming chunks can also overlap, so for instance:</p>

<pre><code>Chunk 1: integers 0-500
Chunk 2: integers 600-1000
Chunk 3: integers 400-700
</code></pre>

<h2>Current method</h2>

<p>Create <code>object_x</code> as a <code>list</code> containing all of its comprising integers <code>0-1000</code>. When a <code>chunk</code> is downloaded, remove all of the integers that comprise the <code>chunk</code> from <code>object_x</code>. Keep doing this until <code>object_x</code> is empty (known to be complete then).</p>

<pre><code>object_x = range(0,1000)

# download chunk 1
chunk = range(0, 500)

for number in chunk:
    if number in object_x:
        object_x.remove(number)

# repeat for every downloaded chunk
</code></pre>

<h2>Conclusion</h2>

<p>This method is very memory intensive. The script throws a MemoryError if <code>object_x</code> or <code>chunk</code>  is too large.</p>

<p>I'm searching for a better way to keep track of the chunks to build the <code>object_x</code>. Any ideas? I'm using Python, but language doesn't matter I guess.</p>
"
10126239,891306.0,2012-04-12T14:59:27Z,3,Reading output with telnetlib in realtime,"<p>I'm using Python's telnetlib to telnet to some machine and executing few commands and I want to get the output of these commands.</p>

<p>So, what the current scenario is -</p>

<pre><code>tn = telnetlib.Telnet(HOST)
tn.read_until(""login: "")
tn.write(user + ""\n"")
if password:
    tn.read_until(""Password: "")
    tn.write(password + ""\n"")

tn.write(""command1"")
tn.write(""command2"")
tn.write(""command3"")
tn.write(""command4"")
tn.write(""exit\n"")

sess_op = tn.read_all()
print sess_op
#here I get the whole output
</code></pre>

<p>Now, I can get all the consolidated output in sess_op.</p>

<p>But, what I want is to get the output of command1 immediately after its execution and before the execution of command2 as if I'm working in the shell of the other machine, as shown here -</p>

<pre><code>tn = telnetlib.Telnet(HOST)
tn.read_until(""login: "")
tn.write(user + ""\n"")
if password:
    tn.read_until(""Password: "")
    tn.write(password + ""\n"")

tn.write(""command1"")
#here I want to get the output for command1
tn.write(""command2"")
#here I want to get the output for command2
tn.write(""command3"")
tn.write(""command4"")
tn.write(""exit\n"")

sess_op = tn.read_all()
print sess_op
</code></pre>
"
